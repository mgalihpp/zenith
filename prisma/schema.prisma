// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(cuid()) @map("_id")
  username     String  @unique
  displayName  String
  email        String? @unique
  passwordHash String?
  googleId     String?
  avatarUrl    String?
  bio          String?

  sessions              Session[]
  followers             Follow[]       @relation("Followers")
  following             Follow[]       @relation("Followings")
  posts                 Post[]
  comments              Comment[]
  likes                 Like[]
  bookmarks             Bookmark[]
  receivedNotifications Notification[] @relation("Recipient")
  issuedNotifications   Notification[] @relation("Issuer")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Session {
  id       String   @id @default(cuid()) @map("_id")
  expireAt DateTime
  userId   String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Follow {
  id          String @id @default(cuid()) @map("_id")
  followerId  String
  followingId String

  follower  User @relation("Followings", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id      String @id @default(cuid()) @map("_id")
  content String
  userId  String

  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments         Media[]
  comments            Comment[]
  likes               Like[]
  bookmarks           Bookmark[]
  linkedNotifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

model Media {
  id        String  @id @default(cuid()) @map("_id")
  postId    String?
  commentId String?
  url       String

  post    Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  type    MediaType

  createdAt DateTime @default(now())

  @@map("post_media")
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

model Comment {
  id          String  @id @default(cuid()) @map("_id")
  content     String
  userId      String
  postId      String
  attachments Media[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Like {
  id     String @id @default(cuid()) @map("_id")
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Bookmark {
  id     String @id @default(cuid()) @map("_id")
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("bookmarks")
}

model Notification {
  id          String           @id @default(cuid()) @map("_id")
  recipientId String
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId      String?
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  type        NotificationType
  read        Boolean          @default(false)

  createdAt DateTime @default(now())

  @@map("notifications")
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}
